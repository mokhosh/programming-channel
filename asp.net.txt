سلام به همگی،
محمد صادق خوش نظر هستم.
امیدوارم همراه هم مطالب مفید و کاربردی یاد بگیریم.
قراره توی این دوره با ASP.NET آشنا بشیم. اما الان نمیخوام درباره ASP.NET حرف بزنم. فعلا فقط درباره دوره.

«پیش نیاز های این دوره چی هست و چی نیست؟»
برای گذروندن این دوره انتظار دارم این چیزا رو از قبل بلد باشید:
- html
- css
- js
- سی شارپ یا وی بی دات نت
که طبیعتا یعنی باید با مفاهیم برنامه نویسی به خوبی آشنا باشید. چون موضوع این دوره فقط ASP.NET هست. هرچند ممکنه من به نکاتی اشاره کنم که به دانش html, css, js, سی شارپ یا vb.net شما اضافه بشه اما اگر با این ها آشنا نیستید قطعا توی این دوره اون ها رو از صفر یاد نمیگیرید. پس اگر لازمه این دوره ها رو که توسط اساتید دیگه تدریس میشن خوب دنبال کنید.
اما چیزهایی که نیاز نیست بلد باشید:
- asp.net (نه بابا!)
- php
- sql
- mvc
- شنا

«چه چیزهایی نیاز خواهید داشت؟»
شما به یه کامپیوتر که توان بوت کردن ویندوز 10 رو داشته باشه نیاز خواهید داشت. اگر از نسخه های قبلی ویندوز استفاده میکنید از صمیم قلب به خودم و به جامعه برنامه نویسان جهان تسلیت عرض میکنم و شما رو به خدا واگذار میکنم. لطفا ویندوز 10 نصب کنید تا راحت تر با هم همراهی کنیم.
در صورتی که طرفدار آزادی نرم افزار و گیاهخواری هستید و از لینوکس استفاده میکنید یا بچه پولدار هستید و از مک استفاده میکنید، نگران نباشید، هرچند باید یکم بیشتر زحمت بکشید و توی دوره توضیح خاصی نمیدیم، اما چند تا راه برای نصب و اجرای ASP.NET دارید. شما رو به این لینک ها واگذار میکنم:
http://docs.asp.net/en/latest/getting-started/installing-on-linux.html
http://docs.asp.net/en/latest/getting-started/installing-on-mac.html
http://www.mono-project.com/docs/web/aspnet
همینطور به یک نرم افزار برای ویرایش کد نیاز خواهید داشت. اگر از اینایی هستید که با خودشون خیلی حال میکنن و به کوه کندن علاقه دارید میتونید از notepad هم استفاده کنید اما ادیتوری که شما رو توی نوشتن کد کمک کنه قطعا زندگی رو لذتبخش تر خواهد کرد. به خصوص که .NET اعتقاد چندانی به کوتاه نویسی و کم نویسی نداره و معتقده اگر سینتکس موجز نیست، IDE شما رو تا دلتون بخواد کمک میکنه.
برای همین احتمالا بهتره مثل اکثر برنامه نویس های ASP.NET برید Visual Studio رو دانلود کنید که بیشتر کارای تکراری رو برای شما انجام میده و کمک میکنه روی مساله خاص برنامه تون تمرکز کنید.
ویژوال استودیو نسخه رایگانی به اسم Visual Studio Community هم داره که من هم از همین نسخه استفاده میکنم که جهنم نریم. (البته به خاطر فوتوشاپ میریم همه مون)
در مورد دوستان غیر ویندوزی هم IDE بسیار خوب MonoDevelop موجود هست که میتونید باهاش انواع نرم افزارهای دات نت، از جمله ASP.NET رو توسعه بدید و اجرا کنید.

«توی این دوره چه چیزهایی خواهم گفت؟»
مطمئنا اول یه سری توضیحات خسته کننده اما بسیار مهم درباره پایه هایی که ASP.NET روی اون ها ساخته شده میدم.
بعد یکم از دور به ASP.NET نگاه میکنیم تا ببینیم چی هست و چطوری کار میکنه و فرقش با تکنولوژی های مشابهش چیه. تکنولوژی هایی که معمولا باهاش مقایسه میشن مثل php. این وسط به بحث های تکراری و همیشگی دعوا و رقابت تکنولوژی ها هم کمی میپردازیم که اگر فردا کسی بهتون گفت چرا ASP.NET یاد گرفتید چهار تا جواب حسابی داشته باشید بکوبید رو میز.
در راستای مرحله قبلی، خیلی کوتاه با سیر رشد ASP.NET آشنا میشیم. و متوجه میشیم که چه چیزهایی به ASP.NET اضافه شده و چه کارهایی به طور کلی میشه با ASP.NET انجام داد.
بعد میریم سراغ کدنویسی و دست به کار میشیم.
از اونجایی که با ASP.NET کارهای خیلی متنوعی میشه انجام داد از سنتی ترین ها شروع میکنیم و تا هر جا که بتونیم با هم ادامه میدیم و به سمت کاربردهای مدرن تر و پیشرفته تر ASP.NET میریم.

«چرا از همین الان مثل آدم نمیریم سراغ ساختن یه سایت واقعی با آخرین نسخه از ASP.NET و باید تمام این اراجیف رو تحمل کنیم؟»
اولا این طرز حرف زدن آدم با استادش نیست.
اگر واقعا حوصله ندارید میتونید این مطالب رو رد کنید، اما به من اعتماد کنید، دونستن و ندونستن اینا میتونه فرق مهمی بین شما باشه و کسی که با کتابا و دوره های آنلاین ASP.NET رو یاد گرفته و تاثیر کاملا کاربردی توی آینده برنامه نویسی شما داشته باشه.
مثلا همون طور که گفتم دیر یا زود یک نفر با تجربه نزدیک به صفر و ادعای نزدیک به بی نهایت سعی میکنه به شما بقبولونه که دیگه دوران ASP.NET گذشته یا php بهتر از ASP.NET هست. و شما باید دانش کافی داشته باشید که بهش بفهمونید نقاط قوت ASP.NET چیه یا اگر حوصله بحث هم ندارید، حداقل بی جهت به شک نیافتید تا بعدا مجبور بشید تحقیق کنید و حرفایی که الان میخوام بهتون بزنم رو از هزار تا سایت و مقاله تیکه تیکه جمع کنید.
یا ممکنه مجبور بشید با یه تیم روی یه سایت نوشته شده با ASP.NET کار کنید که به جای آخرین نسخه ASP.NET از نسخه های قدیمی ترش استفاده میکنه. مطمئنا نمیتونید مدیر عامل رو راضی کنید تا هزینه چندین سال رو تکرار کنه و تمام سایت رو بازنویسی کنه و باید بلد باشید حداقل از کلیت روش کار روش های قبلی سر در بیارید.
ضمنا اگر با لایه های زیرین ASP.NET آشنا باشید وقتی با ASP.NET کار میکنید میدونید زیر کاپوت چه اتفاقاتی داره میافته و راحت تر میتونید از پس مشکلات آینده تون بر بیاید.
اما بهتون قول میدم مطالب رو خلاصه و ساده بیان کنم. شما هم قول بدید خوب بخونید.

«نرم افزارهای تحت وب»
کامپیوتر (=پی سی، لپ تاپ، موبایل و...) بدون برنامه های کامپیوتری فرق چندانی با آجر نداره. از ویندوز و اوبونتو و اندروید گرفته تا فوتوشاپ و ورد و تلگرام، همه نرم افزار هستن.
از وقتی کامپیوترها به هم متصل شدن و اولین شبکه های محلی ایجاد شد، انواع جدیدی از نرم افزارها به وجود اومد که تحت شبکه کار میکرد. و الان که شبکه جهانی (=اینترنت) تقریبا همه جا هست، نرم افزارها و تکنولوژی های تحت وب هم با سرعت بسیار زیادی در حال پیشرفته.
با این توضیحات شروع کردم که بدونید کلاس ASP.NET کلاس طراحی وبسایت نیست، کلاس برنامه نویسیه. و اگر قبلا این طور بود که برنامه های حرفه ای، برنامه های ویندوزی (یا بگیم دسکتاپ اپلیکیشن که جنریک تر باشیم) بودن و طراحای وب نخودی بودن، امروز نرم افزارهای تحت وب حداقل به اندازه نرم افزارهای دسکتاپ اهمیت دارن، اگر مهم تر نباشن.
نرم افزارهایی مثل جستجوگر گوگل، فیس بوک، یوتوب و وردپرس که از نظر بعضی ها در حال تبدیل شدن به سیستم عامل تحت وبه، نمونه هایی از نرم افزارهای تحت وب هستن و شاید با الگوریتم ها و محاسباتی خیلی پیچیده تر از فوتوشاپ سر و کار داشته باشن.
دونستن این نکته باعث میشه ایده آل خودتون رو خیلی از چیزی که به عنوان «طراحی وب» بهش عادت کردیم بالاتر بگیرید و به فکر ساخت نرم افزارهای کاربردی تحت وب باشید. چه با ASP.NET چه با هر زبان دیگه ای.

«نحوه اجرای نرم افزار تحت وب»
وقتی از طریق مرورگر (=کروم، فایرفاکس، سافاری، اج و...) آدرس یه وبسایت رو درخواست میدید، به این میگیم یک درخواست HTTP. درخواست شما بعد از طی یه مسیر نه چندان کوتاه به کامپیوتری میرسه که نرم افزار مورد نظر روی اون قرار داره. مثلا کامپیوتری که نرم افزار گوگل روشه. که حتما حدس میزنید که این کامپیوتر یکم از لپ تاپ شما قوی تر و بزرگ تره، مثلا اندازه یه سالن ورزشی. همه درخواست های HTTP به یک نرم افزار ارجاع داده میشن که بهش میگیم سرور.
نرم افزارهایی مثل آپاچی، انجین اکس، و IIS سرور هستن. یعنی درخواست ها رو تحویل میگیرن و سرو (=اجابت، پاسخگویی) میکنن. هر کدوم از این سرورها رو میشه به یه شکل خاص تنظیم کرد و بهشون گفت چطوری پاسخ هر درخواست رو بدن که بعدا بیشتر با جزییات این کار آشنا میشیم. اما حالت پیش فرض اکثر سرورها اینه که هر آدرسی رو که در ادامه آدرس سرور درخواست دادید، از مکان خاصی توی هارد خودشون بخونن و با توجه به نوع فایل تصمیم گیری کنن که چه جوابی به شما بدن. پیچیده شد؟ مثال میزنم.
فرض کنید چنین آدرسی رو از طریق فایرفاکس درخواست بدیم. http://asp.net/Default.htm
در این صورت سرور سایت asp.net که احتمالا IIS هست درخواست شما رو تحویل میگیره و توی یه جای خاص از هارد دستگاهی که روشه، مثلا C:\Inetpub\www دنبال فایل Default.htm میگرده. در صورتی که این فایل وجود نداشت جواب معروف خطای 404 رو تحویل شما میده. و اگر فایل وجود داشت تمام محتویات فایل Default.htm رو به همراه کمی اطلاعات اضافی به عنوان پاسخ برای شما میفرسته.
اما این در مورد همه فایل ها صادق نیست. از اونجایی که امنیت توی نرم افزارهای تحت شبکه که هر کسی میتونه به اون ها درخواست بده خیلی مهمه، سرورها با توجه به نوع فایل ها جواب های متفاوتی میدن. مثلا ممکنه شما تمام اطلاعات کاربران سایتت رو توی یه فایل دیتابیس ذخیره کنی و توی پوشه سایتت قرار بدی. خیلی بد میشه اگر یک نفر بتونه با حدس زدن آدرس و اسم اون فایل به سرور درخواست بده و فایل رو دانلود کنه. قطعا کاربراتون خوشحال نمیشن. بنابر این سرور رو طوری تنظیم میکنید که فقط انواع خاصی از فایل رو به کاربر تحویل بده. مثلا html, css و js.
تا اینجا همه چی خوبه، اما شما که نمیتونید با html و css یه موتور جستجو مثل گوگل طراحی کنید. برای این کار به زبان های برنامه نویسی نیاز خواهید داشت. به فایل های اجرایی که سرور بتونه اجرا کنه و نتیجه پردازش های برنامه رو تحویل کاربر بده. اینجاست که زبان های برنامه نویسی وب (=php, ruby, python, perl...) به کار میان. البته با هر زبانی (مثلا سی پلاس پلاس) میشه برنامه تحت وب نوشت، اما بعضی از زبان ها یا به طور خاص برای وب طراحی شدن یا به هر حال به خاطر ویژگی هایی که دارن بیشتر از زبون های دیگه توی برنامه نویسی وب به کار میرن.
پس این شد نحوه اجرای نرم افزار تحت وب. شما به سرور درخواست میدید. سرور هم طبق تنظیماتش، درخواست شما رو پردازش میکنه و احتمالا چند قطعه نرم افزار رو اجرا میکنه و نتیجه های اون ها رو به عنوان جواب به شما تحویل میده. این نتیجه توی حالت عادی یه صفحه html هست.
اما اگر دقت کرده باشید من ASP.NET رو توی لیست زبان های برنامه نویسی وب نگفتم. چرا؟

«آیا ASP.NET چیست؟!»
همون طور که اشاره کردم ASP.NET یک زبان برنامه نویسی نیست. زبان های برنامه نویسی مثل c، php، python و جاوا، همگی دارای یه سینتکس خاص، یه تایپ سیستم خاص، سمنتیک خاص و کتابخونه استاندارد خودشون هستن. ASP.NET هیچ کدوم از این ویژگی ها رو نداره. البته این به معنای ضعف ASP.NET نیست، به معنای انعطاف ASP.NET ه.
در واقع ASP.NET یک تکنولوژی و یک چارچوب برای توسعه انواع نرم افزار تحت وب هست که با زبان های برنامه نویسی زیادی میشه براش کد نوشت و به کتابخونه عظیم .NET دسترسی داره که دست شما رو برای نوشتن برنامه های بسیار قوی توی اینترنت باز میکنه. یعنی تقریبا هر کاری که توی برنامه های ویندوزی با سی شارپ انجام میدید به همون راحتی توی ASP.NET قابل اجراست.
شما برای نوشتن ASP.NET (یا هر برنامه ای توی فریم ورک .NET) به زبان خاصی محدود نیستید. هرچند سی شارپ و VB بیشتر استفاده میشن اما تقریبا هر زبونی که اسمش رو شنیدید و خیلی از زبون هایی که اسمشون رو هم نشنیدید (بیشتر از 30 زبان) میتونن برای نوشتن برنامه های .NET به کار برن.
ASP کلاسیک هم که قبل از ASP.NET استفاده میشد تا حدودی همین طور بود. یعنی یک زبان نبود. شما میتونستید با VBScript یا JavaScript براش کد بنویسید و به اشیاء خاص سمت سرور هم دسترسی داشته باشید.
این انعطاف ASP.NET باعث شده با تغییرات سریع دنیای وب همراه بشه و تغییرات ساختاری زیادی داشته باشه. انقدر که کدهای ASP.NET امروزی میتونه هیچ ربطی به کدهای نسخه های قبلش نداشته باشه. تکنولوژی های دیگه معمولا چنین انعطافی رو بدون قربانی کردن سرعت اجرا نمیتونن داشته باشن. از سال 2013 پروژه ASP.NET اوپن سورس شده و نسخه آینده ASP.NET یه فریم ورک مدرن ماژولار کراس پلت فرم خواهد بود که با نسخه های اولیه ASP.NET خیلی متفاوته.

«تفاوت ASP.NET با دیگر تکنولوژی های وب.»
شاید اسم فریم ورک هایی مثل روبی آن ریلز رو شنیده باشید که به زبان روبی نوشته شده. یا لاراول که مخصوص php هست. شاید مقایسه ASP.NET با اینا درست تر باشه تا با php و ruby. میتونید سی شارپ رو تا php و ruby و java مقایسه کنید اما ASP.NET همون طور که گفتم یه فریم ورک هست و بهتره با فریم ورک ها مقایسه بشه.
یکی از تفاوت های ASP.NET با فریم ورک های دیگه همون طور که اشاره کردم آزادی شما توی انتخاب زبان برنامه نویسیه. این خصوصیت توی فریم ورک های دیگه نیست. شما نمیتونید توی ریلز از php استفاده کنید یا توی لاراول از python. اما این امکان در مورد ASP.NET وجود داره. هرچند خیلی مرسوم نیست. حتی شما میتونید زبان برنامه نویسی مورد علاقه خودتون رو برای .NET بسازید و با اون ASP.NET بنویسید.
یکی دیگه از مزیت های ASP.NET دسترسیش به کتابخونه .NET هست که اگر باهاش کار کرده باشید قدرش رو خوب میدونید. یه کتابخونه گسترده و بسیار منظم که به عنوان مثال کار با Thread ها و Reflection و کار با انواع داده ها از جمله داده های تصویری رو برای شما بسیار آسون میکنه. هر زبانی یه کتابخونه استاندارد همراه خودش داره و زبان های اوپن سورس یا زبان های پرطرفدارتر مثل جاوا کتابخونه های زیادی هم توسط کاربرا براشون نوشته شده. اما ASP.NET بدون اضافه کردن کتابخونه های خارجی قدرت فراوان و ساختار منظمی داره، هرچند توی ASP.NET هم میتونید در صورت نیاز از کتابخونه های خارجی استفاده کنید.
و همون طور که گفتم ASP.NET این همه قدرت و ساختار رو به هیچ زبان و روش خاصی از برنامه نویسی محدود نکرده. شما با هر ساختاری که راحتید و با هر زبانی که بلدید میتونید با بقیه .NET کارا همکاری کنید. همین انعطاف باعث شده که ASP.NET بتونه از یه روش سنتی به اسم WebForms به یه روش مدرن به اسم MVC کوچ کنه و همچنان محبوب بمونه.
این رو میتونید با زبان هایی مقایسه کنید (از زبان خاصی اسم نمیبرم که شورش نشه) که هنوز دارن برای شیءگرا شدن و منظم کردن کتابخونه استانداردشون دست و پا میزنن و اگر رایگان بودنشون باعث محبوبیتشون نشده بود، هیچ وقت با فریم ورک های متنوع نمیتونستن ادامه حیات بدن.

«دوستم میگه ASP.NET خوب نیست چون...»
اگر دوستتون درباره یه شرایط ویژه داره حرف میزنه شاید حق با اون باشه. به هر حال هر پروژه ای شرایطی داره. مثلا ممکنه شما مجبور باشید روی یه سرور لینوکسی برنامه تون رو منتشر کنید که از ASP.NET ساپورت نمیکنه. در این صورت بعیده ASP.NET انتخاب خوبی باشه.
اما اگر دوستتون داره ASP.NET رو به طور کلی با یه زبان برنامه نویسی تحت وب مقایسه میکنه و میگه خوب نیست، خیلی جدی نگیرید. شانس بالایی وجود داره که این مقایسه با زبان php صورت میگیره. زبان php مزیت هایی داره که باعث میشه خود من هم خیلی از پروژه هام رو با php انجام بدم، مثل این که افراد خیلی زیادی ازش استفاده میکنن و سرورهای بسیار زیادی با قیمت مناسب از php پشتیبانی میکنن. شاید براتون سوال بشه که اگر زبان خوبی نیست چرا افراد زیادی استفاده میکنن و سرورهای زیادی پشتیبانی میکنن. سوال خوبیه. جوابش هم اینه: چون رایگانه! از قدیم هم گفتن مفت باشه هر طور که بود اشکالی نداره.
به همین دلیل مقایسه ASP.NET با هیچ پروژه رایگانی درست نیست. و همون طور که گفتم اساسا مقایسه هایی که مربوط به زبان برنامه نویسی میشه هم درست نیست چون ASP.NET زبان برنامه نویسی نیست.
دقت کنید حاصل حرفام این نیست که ASP.NET از تکنولوژی دیگه ای برتره. من کلا دارم با مقایسه های سطحی مخالفت میکنم. درست اینه که بسته به نوع پروژه تون IIS رو با Apache و nginx و سرورهای دیگه مقایسه کنید، سی شارپ رو با جاوا و php و روبی و زبان های دیگه مقایسه کنید و ASP.NET رو با فریم ورک های دیگه، و بعد بسته به شرایطتون تصمیم گیری کنید.
از طرف دیگه حرفم این هم نیست که نقد تکنولوژی ها یا زبان های برنامه نویسی غلطه. اتفاقا نقد تکنولوژی ها خیلی هم خوبه. اما از نظر من نقد به معنای غر زدن نیست. نقد به معنای شناخت و بیان دقیق نقاط قوت و نقاط ضعفه. و برای این کار باید هدف مورد نظر طراحان تکنولوژی رو دونست. اگر فلسفه ای پشت اون تکنولوژی وجود داره باهاش آشنا بود. و از اونجایی که هر تکنولوژی برای حل یه مساله مشخص ساخته شده باید اون مساله رو خوب شناخت. بعد میشه نقد درستی انجام داد.
اما در مورد این که کدوم رو برای یاد گرفتن انتخاب کنید، من باشم میگم همه رو تجربه کنید. برنامه های ساده در حد HelloWorld هم نه، به نظرم به راحتی میشه توی همه تکنولوژی های مطرح یاد بگیرید مثلا یه سیستم وبلاگ پیاده سازی کنید. اینطوری عوض شنیدن مقایسه های دیگران، تجربه خودتون رو به کار میگیرید.

خب تبریک میگم مقدمات تموم شد :))
بریم سراغ ASP.NET

«خیلی هم خوشحال نشید، اول یکم تاریخچه»
برای من برنامه نویسی همیشه به معنای کدنویسی بوده. اما خیلی از محیط های برنامه نویسی هست که سعی میکنن شما رو مثلا کمک کنن و به جای شما کد بنویسن. شما کافیه اشیائی که نیاز دارید بکشید روی صفحه و رفتاراشون رو توصیف کنید. با این که اکثر این جور محیط ها برای غیر حرفه ای ها هستن، اما مایکروسافت محصولی بسیار حرفه ای داره که از این طرز برنامه نویسی هم حمایت میکنه. اون هم ویژوال استودیو هست که حتما حداقل اسمش رو شنیدید.
این ایده اولین بار با ویژوال بیسیک شروع شد، اما انقدر جذاب بود که با کمی فاصله زمانی، چند زبان دیگه هم اضافه شد و شد ویژوال استودیو. ایده دیگه ای هم هست که بی ربط به برنامه نویسی ویژوال نیست، و اون برنامه نویسی سریعه (=RAD) که تمام تلاشش اینه که شما در سریع ترین زمان ممکن ایده تون رو به یه برنامه کاربردی تبدیل کنید. هرچند این برنامه efficient ترین برنامه ممکن نباشه. البته پیشگامان RAD همیشه بخشی از تلاششون اینه که تا جایی که ممکنه این بهینه سازی و افیشنسی رو به کدهای تولید شده برگردونن.
اینا رو گفتم که بگم نسخه های اولیه ASP.NET بیشتر با مد نظر قرار دادن RAD طراحی شده بود. یعنی همه چیز حاضر و آماده باشه تا شما فقط کنترل های مورد نیازتون رو روی صفحه قرار بدید و ASP.NET فکر جاهای سختشو براتون بکنه.
یه نکته دیگه هم به شدت توی نسخه های اولیه ASP.NET دیده میشه و اون شباهت زیاد به طراحی برنامه های ویندوزیه. اگر برنامه نویس سی شارپ باشید، کار کردن با نسخه های اولیه ASP.NET فرق زیادی براتون با برنامه نویسی ویندوز نداره. همون کنترل ها، همون اسم ها، حتی تا حد امکان Event ها هم به همون شکل مدیریت میشن.
مایکروسافت اسم این روش رو گذاشته بود Web Forms که حتی همین اسم هم یاد آور Windows Forms هست که استاندارد برنامه نویسی ویندوزه.
توی این حالت، کار شما خیلی با برنامه نویس های زبان های تحت وب دیگه متفاوت بود. در حالی که اونا:
- طراحی و پیاده سازی دیتابیس رو انجام میدادن
- کدهای مخصوص اتصال به دیتابیس رو مینوشتن
- کدهای سمت سرور رو برای دریافت، ثبت، تغییر و حذف اطلاعات دیتابیس مینوشتن
- کدهای html رو مخلوط با کدهای سرور ساید مینوشتن تا یه صفحه دینامیک تولید کنن
- کدهای css رو برای تغییر ظاهر html مینوشتن
- کدهای javascript مورد نیاز رو برای پویا تر کردن html و مثلا برای تایید صحت اطلاعات فرم ها مینوشتن
و احتمالا یه سری کارای دیگه که ننوشتم، توی ASP.NET شما فقط چند تا کنترل رو میکشیدید روی صفحه و از دیالوگ های مختلف چند تا تنظیمات انجام میدادید و شاید توی چند خط از کد هم دست میبردید و وبسایت شما آماده بود.
منظورم این نیست که نوشتن موتور جستجوی گوگل هم توی ASP.NET با همین چند کلیک انجام میشه. بیشتر منظورم اینه که ASP.NET سعی میکرد همه کار رو به جای شما انجام بده و نیاز نباشه شما html، css، js یا sql بنویسید. مگر این که خودتون تمایل داشتید چیزی رو دستکاری کنید. و این در ابتدا شاید جذاب بود اما مسیر توسعه وب به سمتی رفت که این مدل طراحی وب دیگه مطلوب افراد زیادی نیست. بنابر این ASP.NET خودش رو با شرایط تطبیق داد و روش های Web Pages و MVC رو معرفی کرد.

«اوکی. ASP.NET چه بخش هایی داره؟»
مدل قدیمی Web Forms که باید حداقل بدونید چی به چی بوده چون حتما بهش برمیخورید.
مدل جدید Web Pages که به شما اجازه میده کنترل کامل روی کدهاتون داشته باشید اما کدنویسی رو بسیار ساده و لذت بخش میکنه براتون.
مدل سه لایه MVC که برای توسعه برنامه های تحت وب بسیار مناسبه. اگر با این مدل برنامه نویسی که تقریبا توی تمام زبان ها پیاده شده آشنایید که بهتر، اگر نه بعدا توضیح میدم نگران نباشید.
مدل سایت های تک صفحه ای SPA که برای برنامه های تحت وبی مناسبه که بیشتر برنامه نویسی شون سمت کلاینت و جاوا اسکریپت هست و استفاده سنگینی از آژاکس یا وب سوکت دارن.
فریم ورک Web API برای پیاده سازی وب سرویس. یعنی برنامه های تحت وبی که نمای ظاهری برای تعامل با کاربر ندارن و توسط برنامه های دیگه استفاده میشن.
فریم ورک SignalR برای پیاده سازی برنامه های realtime و ارتباط زنده کلاینت و سرور با کمک وب سوکت.
برای این که بگید با ASP.NET آشنا هستید باید با Web Forms آشنا باشید و بتونید خوب از Web Pages استفاده کنید.
بلد بودن MVC یه مزیت خیلی بزرگه و شاید بشه این رو مرحله متوسط ASP.NET دونست.
بقیه بخش ها هم احتمالا مناسبه که بگیم توی مراحل پیشرفته ASP.NET قرار میگیرن. هرچند از تمام این تکنولوژِی ها میشه حرفه ای و پیشرفته استفاده کرد یا ابتدایی و سطحی.

«ساده ترین صفحه ASP.NET چه شکلیه؟»
این شکلی:
```
<html>
<h1>Salam</h1>
</html>
```
و پسوند فایل باید حتما .aspx باشه.
اشتباه نکنید. این یه صفحه html ساده نیست. اگر این رو توی php مینوشتیم فرقی با html ساده نداشت. یعنی وقتی سرور درخواست این صفحه رو دریافت میکرد خط به خط اون رو به عنوان پاسخ ارائه میکرد و چون هیچ کد php برای اجرا شدن وجود نداشت، درست مثل html تحویل کاربر داده میشد.
اما توی ASP.NET این طور نیست. اولین باری که این صفحه رو درخواست میدید تمام این صفحه، تبدیل به یه کلاس سی شارپ میشه و کامپایل میشه. دفعات بعد هم اون کلاس کامپایل شده سی شارپه که اجرا میشه و این کد html رو به عنوان خروجی تحویل شما میده.
بله، یه کلاس کامل سی شارپ با پراپرتی ها و متدهای مختلف که یکیشون کد html ی که شما نوشتید رو به عنوان خروجی تحویل میده.
شما میتونید مثل ASP کلاسیک با علامت کوچکتر و بزرگتر و علامت درصد، کدهای سی شارپتون رو قاطی کدهای html کنید. و باز هم مثل ASP کلاسیک میتونید از تگ اسکریپت با پراپرتی runat=server برای نوشتن کدهاتون استفاده کنید. اما برعکس ASP کلاسیک با این دو نوع کدنویسی برخورد بسیار متفاوتی میشه که بعدا بیشتر توضیح میدم.

«خب این فرقش با php چی شد؟ درصد به جای علامت سوال؟»
یه سوءتفاهمی هست بچه ها و اون اینه که خیلیا فکر میکنن یه زبان برنامه نویسی همه ش سینتکسه. این بسیار اشتباهه. سینتکس فقط پوسته رویی هست، و هرچند اهمیت داره اما شاید کم اهمیت ترین بخشه. وقتی زیر کاپوت زبان ها رو نگاه کنید متوجه میشید چه تفاوت هایی با هم دارن.
سرتون رو با توضیح تفاوتای C و Java و JavaScript و غیره درد نمیارم اما این در مورد ASP.NET هم صادقه. در مقابل ASP کلاسیک و php که هیچ ایرادی نداره توشون کدهای سمت سرور رو با html میکس کنید، ASP.NET کاملا با این کار مخالفه. ممکنه بگید ما بسیار متمدن هستیم و توی php هم همین کار رو انجام میدیم. اما مساله اینجاست که اگر زیر کاپوت php و زیر کاپوت ASP.NET رو ببینید، متوجه میشید که ASP.NET برای جدا بودن این کدها طراحی شده و توی php به لحاظ ساختاری ترجیحی وجود نداره. 
نکته توی کلاس سی شارپی هست که گفتیم خود سرور توی اولین اجرا تولید میکنه. اگر شما کدهای سرورساید رو با کدهای html قاطی کنید، تمام کد شما به ترکیبی از خروجی String ها و کدهای سی شارپ داخل یکی از متدهای اون فایل سی شارپ تبدیل میشه. در حالی که اگر از کنترل های ASP.NET و روشی که .NET از شما انتظار داره استفاده کنید، یه کلاس سی شارپ تمیز خواهید داشت که متدها و پراپرتی های مورد نیاز رو داره و انگار خط به خطش رو یه برنامه نویس خوش سلیقه نوشته.

«میشه به خاطر خدا شروع کنیم به نوشتن صفحات ASP.NET؟»
بله حتما :))

«راه اندازی IIS در ویندوز 10»


سلام به همگی،
محمد صادق خوش نظر هستم.
با یک جلسه دیگه از آشنایی با ASP.NET در خدمت شمام.

«کجا بودیم؟»
همین اول بگم که دیگه خبری از اون شوخیا و مهربونیای جلسه اول نیست. اونا فقط برای جذب شما بود، دیگه تموم شد. صاف بشین آقا جان.
خخخخخ.
نه ولی جدا برید بشینید پای دستگاه و آماده شید برای همراهی کردن توی فعالیت هایی که میگم.
یه یادآوری کوتاه هم از جلسه قبل برای اونایی که ده بار از روی مطالب ننوشتن:
- هرچند میشه با ASP.NET طراحی وبسایت انجام داد، اما ما به نرم افزارهای کاربردی تحت وب فکر میکنیم
- نرم افزار ASP.NET روی سرور اجرا میشه و فقط به منابع سرور و اطلاعاتی که کاربر همراه درخواستش فرستاده دسترسی داره
- حاصل اجرای یک صفحه ASP.NET معمولا یک فایل html هست
- گفتیم ASP.NET یک زبان نیست، مجموعه ای از تکنولوژی هاست برای توسعه نرم افزارهای تحت وب که میشه از زبان های مختلفی توش استفاده کرد
- از ASP.NET میشه برای RAD استفاده کرد، و میشه برای روش های پسندیده تر و امروزی توسعه وب استفاده کرد

«خب، دیگه میریم سراغ کدنویسی؟»
امشب حتما به کدنویسی میرسیم، اما میخوام یکم دیگه اهمیت این مدل حرفا رو براتون روشن کنم.
حتما شنیدید میگن به طرف ماهی نده، ماهی گیری یاد بده. و حتما دیدید دانشجوهایی رو که خیلی هم درسا رو خوب میفهمن، اما وقتی میشینن پای دستگاه تا یه برنامه بنویسن نمیدونن باید چیکار کنن و از کجا شروع کنن. یکی از دلایل مهم این مساله، اینه که دانشجو مراحل انجام یک پروژه خاص رو طی کرده اما نتونسته توی ذهنش مفاهیم رو تیکه تیکه کنه. و وقتی آدم قطعات جدا از هم نداشته باشه نمیتونه خونه سازی کنه. توی دانش های کامپیوتری و هر جایی که باید مخترع باشید هم همینه. تا وقتی همه چیز رو انقدر تیکه تیکه نکنید و خوب نفهمیدشون که تبدیل به قطعات قابل استفاده برای خونه سازی بشن، هیچ چیز یاد نگرفتید و فقط مصرف کننده اید.
تشریح کردن هر پدیده ای باعث ایجاد روحیه خلاقیت میشه. اگر این حرفا رو جدی بگیرید و تلاش کنید کلمات رو مال خودتون کنید، فردا فقط ASP.NET بلد نیستید، یه آدم متفاوت هستید، یه آچار فرانسه که از قضا به ASP.NET هم وارده.

«ساده ترین صفحه ASP.NET چه شکلیه؟»
این شکلی:
```
<html>
<h1>Salam</h1>
</html>
```
و پسوند فایل باید حتما .aspx باشه.
اشتباه نکنید. این یه صفحه html ساده نیست. اگر این رو توی php مینوشتیم فرقی با html ساده نداشت. یعنی وقتی سرور درخواست این صفحه رو دریافت میکرد خط به خط اون رو به عنوان پاسخ ارائه میکرد و چون هیچ کد php برای اجرا شدن وجود نداشت، درست مثل html تحویل کاربر داده میشد.
اما توی ASP.NET این طور نیست. اولین باری که این صفحه رو درخواست میدید تمام این صفحه، تبدیل به یه کلاس سی شارپ میشه و کامپایل میشه. دفعات بعد هم اون کلاس کامپایل شده سی شارپه که اجرا میشه و این کد html رو به عنوان خروجی تحویل شما میده.
بله، یه کلاس کامل سی شارپ با پراپرتی ها و متدهای مختلف که یکیشون کد html ی که شما نوشتید رو به عنوان خروجی تحویل میده. یعنی ما نهایتا aspx هم نخواهیم داشت. همه چیز تبدیل به سی شارپ (یا زبان های دیگه دات نت) میشه.
شما میتونید مثل ASP کلاسیک با علامت کوچکتر و بزرگتر و علامت درصد، کدهای سی شارپتون رو قاطی کدهای html کنید. و باز هم مثل ASP کلاسیک میتونید از تگ اسکریپت با پراپرتی runat=server برای نوشتن کدهاتون استفاده کنید. اما برعکس ASP کلاسیک با این دو نوع کدنویسی برخورد بسیار متفاوتی میشه که بعدا بیشتر توضیح میدم.
یه سوءتفاهمی هست بچه ها و اون اینه که خیلیا فکر میکنن یه زبان برنامه نویسی همه ش سینتکسه. این بسیار اشتباهه. سینتکس فقط پوسته رویی هست، و هرچند اهمیت داره اما شاید کم اهمیت ترین بخشه. وقتی زیر کاپوت زبان ها رو نگاه کنید متوجه میشید چه تفاوت هایی با هم دارن.
سرتون رو با توضیح تفاوتای C و Java و JavaScript و غیره درد نمیارم اما این در مورد ASP.NET هم صادقه. در مقابل ASP کلاسیک و php که هیچ ایرادی نداره توشون کدهای سمت سرور رو با html میکس کنید WebForms کاملا با این کار مخالفه. ممکنه بگید ما بسیار متمدن هستیم و توی php هم همین کار رو انجام میدیم. اما مساله اینجاست که اگر زیر کاپوت php و زیر کاپوت ASP.NET رو ببینید، متوجه میشید که WebForms برای جدا بودن این کدها طراحی شده و توی php به لحاظ ساختاری ترجیحی وجود نداره. 
نکته توی کلاس سی شارپی هست که گفتیم خود سرور توی اولین اجرا تولید میکنه. اگر شما کدهای سرورساید رو با کدهای html قاطی کنید، تمام کد شما به ترکیبی از خروجی String ها و کدهای سی شارپ داخل یکی از متدهای اون فایل سی شارپ تبدیل میشه. در حالی که اگر از کنترل های ASP.NET و روشی که .NET از شما انتظار داره استفاده کنید، یه کلاس سی شارپ تمیز خواهید داشت که متدها و پراپرتی های مورد نیاز رو داره و انگار خط به خطش رو یه برنامه نویس خوش سلیقه نوشته.

«میشه به خاطر خدا شروع کنیم به نوشتن صفحات ASP.NET؟»
بله حتما :))

«راه اندازی IIS در ویندوز 10»
راه اندازی IIS از ویندوز 7 به بعد خیلی راحت شده. برای این کار باید از بخش Turn windows features on and off استفاده کنیم. اگر نمیدونید چطوری برید به این بخش این مراحل رو دنبال کنید.
- دکمه استارت رو بزنید و وقتی منوی استارت ظاهر شد شروع به تایپ کنید: programs
- باید default programs رو به عنوان پیشنهاد بهتون بده، روش کلیک کنید
- توی پنجره default programs لینک programs and features رو کلیک کنید (پایین سمت چپ)
- حالا لینک Turn windows features on and off رو از منوی سمت چپ انتخاب کنید تا بخش مورد نظر بیاد
اینجا میتونید خیلی از امکانات پیشرفته ویندوز رو فعال یا غیر فعال کنید. برای کار ما نیاز هست که دات نت فریم ورک 4.6 کاملا فعال باشه (مخصوصا چک کنید توی زیر مجموعه هاش ASP.NET فعال باشه). و برای فعال سازی سرور IIS باید بخش Internet Information Services رو فعال کنید. اگر دقیقا میدونید چیا رو نیاز دارید، همونا رو انتخاب کنید. اگر نمیدونید، میتونید به روش ایرانی عمل کنید و همه رو فعال کنید. اما اینها چیزایی هست که حتما باید فعال باشه:
از Web Management Tools
- IIS Management Console
- IIS Management Services
از زیرمجموعه های World Wide Web Services
- .NET Extensibility 4.6
- ASP.NET 4.6
- ISAPI Extensions
- ISAPI Filters
- Common HTTP Features
بخش Security رو هم میتونید فعال کنید. اگر بعدها کدی رو دقیقا مثل یه آموزش زدید و نتیجه مورد نظر رو نگرفتید، یکی از جاهایی که خوبه چک کنید، همین فعال بودن امکانات مورد نیاز توی IIS هست.
خب، حالا میتونید برید توی مرورگرتون و برای آدرس بنویسید localhost. باید IIS جواب شما رو بده.
این فایل html رو میتونید توی c:\inetpub\wwwroot پیدا کنید. اما مثل این نیست که توی مرورگر این آدرس رو درخواست بدید. الان دیگه کامپیوتر شما هم نقش سرور رو بازی میکنه هم نقش کلاینت رو. مرورگر به عنوان کلاینت به localhost (=127.0.0.1) درخواست میده و این IP که دستگاه خود شماست الان طوری تنظیم شده که درخواست های HTTP رو به IIS ارجاع بده. و نهایتا IIS به عنوان سرور جواب رو طبق تنظیماتش به مرورگر شما تحویل میده. این باعث میشه بتونید صفحات ASP.NET (یا زبان های دیگه طرف سرور) رو با کمک IIS اجرا کنید و نتیجه رو تحویل بگیرید. حتی میتونید از طریق بقیه دستگاهایی که روی یک شبکه هستن با کامپیوتر شما، به این سرور دسترسی داشته باشید. کافیه IP کامپیوترتون رو روی شبکه بدونید و به جای localhost توی مرورگر دستگاهای دیگه شبکه وارد کنید.

«تست اجرای ASP.NET در IIS»
برای تست درست کارکردن ASP.NET روی سرورتون، کدی که توی بخش قبل نوشتیم رو توی فایل Default.aspx ذخیره کنید و توی شاخه wwwroot کپی کنید. اگر الان localhost رو درخواست بدید همون صفحه قبلی میاد. اما اگر iisstart.htm رو از اون شاخه حذف کنید و مجددا localhost رو درخواست کنید اولین کد ASP.NET شما اجرا میشه و نتیجه ش رو تحویل میگیرید. البته میتونستید به جای حذف iisstart.htm، به انتهای درخواستتون Default.aspx/ رو اضافه کنید. اینجوری تصریح میکردید که این فایل رو میخواید.
اما وقتی تصریح نکردید چه اتفاقی افتاد؟ اگر Default.aspx رو پاک کنید هم دنبال هر فایل aspx یا htm ی میگرده؟ اگر چند تا فایل باشه کدوم رو انتخاب میکنه؟ سوال خوبیه.
این در واقع یه لیست از پیش تعیین شده ست که میتونید توی تنظیمات IIS ببینیدش و تغییرش بدید. هرچند تغییرش توصیه نمیشه، چون برنامه نویس ها ممکنه با تکیه کردن به این پیش فرض یه رفتار خاص رو توی برنامه شون طراحی کرده باشن و خوبه توی همه سرور ها همین پیش فرض رعایت بشه. هر جا که هستید سعی کنید تا حد ممکن به رسم و رسومات احترام بذارید.
برای دیدن این تنظیمات دنبال من بیاید:
- دکمه استارت و تایپ عبارت IIS و انتخاب Internet Information Services Manager
- شما وارد بخش مدیریت IIS شدید، اینجا گزینه Default Documents رو انتخاب کنید
اینم لیستی که گفتم. وقتی شما هر «شاخه» ای رو درخواست میدید و فایلی رو تعیین نمیکنید IIS میاد سراغ این لیست و از بالا تا پایین میگرده تا این فایلا رو توی اون شاخه پیدا کنه، در صورت اجرایی بودن اجراشون کنه و نتیجه رو تحویل بده. با توجه به این لیست میفهمیم که اگر نوع فایل شما asp کلاسیک بود، اصلا نیاز نبود iisstart رو حذف کنید چون همینطوری Default.asp اولویت داره.

«ایجاد یک برنامه جدید در IIS»
ما قرار نیست فایل هامون رو مستقیم توی wwwroot قرار بدیم. چون اینطوری برای کار روی هر پروژه جدید باید پروژه قبلی رو پاک کنیم و پروژه جدید رو توی این شاخه کپی کنیم. ضمنا به خاطر امنیت بیشتر، معمولا درایو C سخت گیری های بیشتری روی دستری فایل ها داره که ممکنه گاهی کار شما رو سخت کنه. بنابر این با هم یاد میگیریم که چطوری یه شاخه رو به IIS معرفی کنیم و بگیم برنامه ما اینجا قرار داره.
اول باید بدونید که توی IIS سه تا مفهوم در این زمینه داریم. یکی WebSite یکی Application و یکی Virtual Directory. چون قرار نیست مدیر یه سرور ویندوزی بشید و قراره فقط بتونید با این دوره پیش بیاید خیلی وارد جزئیات نمیشم. ما فعلا بیشتر با Application کار داریم. اما ساختار کلی اینه که شما توی IIS میتونید یه سری WebSite تعریف کنید و داخل هر وبسایت میتونید تعدادی Application یا Virtual Directory داشته باشید. به صورت پیشفرض یه وبسایت (Default Website) وجود داره که ما برای هر پروژه مون توش یه Application درست میکنیم. شاخه های مجازی (Virtual Directory) تا حدودی شبیه اپلیکیشن ها رفتار میکنن و میتونید از اونا هم استفاده کنید اما هدفشون چیز دیگه ای هست و گاهی هم ممکنه براتون مشکل ایجاد کنن. پس تا وقتی با Website ها و شاخه های مجازی بیشتر آشنا نشدیم، فعلا کاری باهاشون نداریم.
برای ساخت یه Application جدید، اول یه شاخه توی هاردتون ایجاد کنید که فایلای پروژه رو اونجا قرار بدیم. مثلا D:\learning\asp.net001. خیلی هم خوبه که به عنوان یه برنامه نویس از شاخه ها خوب استفاده کنید و هاردتون رو کاملا منظم و معنادار نگه دارید.
حالا وارد مدیریت IIS شید و از پنل سمت چپ روی Default Website کلیک راست کنید و Add Application رو انتخاب کنید.
دیالوگ ایجاد اپلیکیشن جدید باز میشه. اولین چیزی که انتخاب میکنید Alias هست. ایلیس (ei-lias خونده میشه) همیشه یه اسم مجازی هست که برای دسترسی راحت به کار میره، ممکنه توی محیط های دیگه هم به چنین موضوعی بربخورید. من اسم اپلیکیشنمو میذارم LearnAspx. برای Physical Path هم شاخه ای که ساختم رو انتخاب میکنم. میتونید OK کنید. اپلیکیشن شما توی IIS به رسمیت شناخته میشه دیگه. میتونید http://localhost/LearnAspx رو درخواست بدید تا با یه خطای درست و حسابی مواجه بشید :)
برای رفع این خطا کافیه فایل Default.aspx مون رو به این شاخه منتقل کنیم. حالا با درخواست دوباره، برنامه تخصصی ASP.NET مون اجرا میشه و نتیجه ش رو میبینیم.

«افزودن کدهای سمت سرور»
خب حالا میتونیم شروع کنیم به اضافه کردن کدهای سمت سرور. از قدیمی ترین و اشتباه ترین حالت شروع میکنیم تا ببینیم aspx چه مسیری رو طی کرده تا به این جایی که هست برسه. اینطوری کدهای aspx برای ما جادویی نیستن و همه چیز برامون کاملا مشخصه. و این هدف یه شاگرد حرفه ای توی هر کلاسیه. که از همه چیز سر دربیاره و چیزی براش مبهم و جادویی نباشه.
برای این که یه قطعه کد سمت سرور توی ASP کلاسیک قرار بدیم از تگ <% %> یا یه تگ اسکریپت با اتریبیوت runat=server استفاده میکردیم. همین امکان توی ASP.NET هم وجود داره. هر دو رو به صفحه ای که نوشته بودیم اضافه میکنیم. این کد رو قبل از تگ body قرار میدیم:
```
<script runat="server">
    Dim userName As String = "Momo"
</script>
```
صفحه رو که اجرا کنیم به مشکلی برنمیخوریم که نشونه خوبیه. یعنی کد VB ما با موفقیت به صفحه اضافه شده و ما عبارت Momo رو توی یه متغیر ذخیره کردیم. حالا این کد رو بعد از Salam و داخل همون تگ h1 قرار بدید:
```
<script runat="server">
    Response.Write(userName)
</script>
```
اگر با ASP کلاسیک آشنا باشید میدونید که Response.Write برای نوشتن یک عبارت توی صفحه هست و مثل echo توی php عمل میکنه. حالا اگر صفحه رو اجرا کنید یه خطای خوشگل بهتون تحویل میده. چرا؟ به خاطر همون کلاس سی شارپ (توی این مورد کلاس VB ه البته) که گفتیم موقع درخواست صفحه ساخته میشه. خب مشکل چیه؟ بهتون گفته بودم که موقع درخواست یه کلاس کامل ساخته میشه که یکی از تابع هاش وظیفه داره تمام html ی که نوشتید رو توی خروجی بنویسه. و بهتون گفته بودم که برعکس ASP کلاسیک، اینجا تگ script و تگ درصد، یه فرق ساختاری با هم دارن. تفاوتشون اینه که کدی که داخل تگ script مینویسید توی بدنه کلاس قرار داده میشه و کدهای داخل تگ درصد داخل تابعی که html ها رو توی خروجی مینویسه قرار میگیره. پس نیاز به توضیح نیست که داخل تگ script فقط میتونید متغیر و تابع تعریف کنید و نمیتونید دستور اجرا کنید، و داخل تگ درصد میتونید دستور اجرا کنید اما نمیتونید تابع تعریف کنید.
حالا برای رفع خطا کافیه تگ اسکریپت دومی رو به تگ درصد تبدیل کنیم.
```
<h1>Salam <% Response.Write(userName) %></h1>
```
میبینید که عبارت Salam Momo (یا هر اسمی که جای Momo استفاده کنید) نمایش داده میشه. خب اولین کد سمت سرورتون با موفقیت اجرا شد و یه درک زیربنایی از نحوه کارکرد aspx دارید الان.
برای این که توی ASP کلاسیک زیاد از Response.Write استفاده میشد، یه معادل ساده تر هم براش دایم. کافیه بعد از درصد اول یه علامت مساوی بذارید و دیگه نیازی به صدا زدن تابع Write نیست:
```
<h1>Salam <%= userName %></h1>
```
تا اینجا ما خبر داریم که داریم با کدنویسی صفحه رو تولید میکنیم ولی فرق چندانی با صفحه استاتیک (html خالی) نداره. برای این که یه قدم کوچیک برداریم، کد رو به این شکل تغییر بدید:
```
<h1>Salam <%= Request.QueryString.get("username") %></h1>
```
اگر صفحه رو سیو کنید و درخواست بدید میبینید که اسم پاک میشه و چیزی جاش نمیاد. چرا؟ اول باید یکم توضیحات بدم.
میبینید که از شر Response.Write با کمک = خلاص شدیم، و حالا عبارتی که داریم تحویل میدیم تا برامون بنویسه از یه آبجکت مشابه Response داریم میگیریم. اسمش هم Request هست که اطلاعات مربوط به درخواست http ارسال شده به صفحه رو تو خودش داره. یکی از این اطلاعات Query String ه. حتما دیدید توی بعضی از آدرس های اینترنتی بعد از اسم فایلی که درخواست شده یه علامت سوال میاد و بعدش یه سری جفت اسم و مقدار (name-value pair). به این میگیم کوئری استرینگ که یکی از راه های فرستادن اطلاعات به سرور به همراه درخواستمونه. پس به جای درخواست قبلی توی مرورگر این URL رو وارد کنید:
```
http://localhost/LearnAspx/?username=Momo
```
البته اینجا اسم فایل نیست ولی قبلا توضیح دادیم که IIS این جای خالی رو طبق تنظیماتش پر میکنه و برای ما این آدرس مساویه با:
```
http://localhost/LearnAspx/Default.aspx?username=Momo
```
حالا که صفحه رو درخواست بدید باز Hello Momo دیده میشه و این بار میتونید بدون تغییر دادن کد و با تغییر دادن آدرسی که درخواست میدید اسم رو عوض کنید.
خب بیایم یکم صفحه رو جذاب تر کنیم. یه input بذاریم که کاربر عوض وارد کردن اسمش توی آدرس، خیلی شیک اسمش رو بنویسه و ارسال کنه تا ما بهش سلام کنیم. این یه اینپوت ساده html ه:
```
<input type="text">
```
توی زبان های سمت سرور برای این که بتونیم به مقدار این اینپوت دسترسی داشته باشیم باید بهش یه پراپرتی name بدیم، اون رو توی یه form قرار بدیم و یه دکمه submit هم بذاریم که وقتی دکمه کلیک شد، هر چی توی اینپوت نوشتیم به عنوان value (مقدار) ش فرستاده بشه به سرور. به فرم هم میشه گفت یکی از دو روش get یا post رو انتخاب کنه. اینا چیه؟ هر دوشون درخواست های http هستن. با get آشنا هستید. درخواست ساده یه آدرس رو میگیم get. که میتونه توش Query String هم داشته باشه. یعنی اگر یه تگ form با اتریبیوت method=get بذاریم دور اینپوتمون، وقتی submit (تسلیم، ارسال) میشه به سرور، همون کوئری استرینگی که دستی نوشتم رو خودش میسازه و آخر آدرس میاره. اما اگر از متد پست استفاده کنیم، اطلاعات فرستاده میشه اما توی آدرس دیده نمیشه.
پس این میشه محتویات تگ body ما:
```
<form method="get">
    <h1>Salam <%= Request.QueryString.get("userName") %></h1>
    <input type="text" name="userName">
    <input type="submit">
</form>
```
فقط بچه ها خوب به جزئیات دقت کنید و هر کدی که میذارم رو با کدهای قبلی مقایسه کنید، وگرنه کپی و پیست کردن و تست کردن کدها کمک زیادی بهتون نمیکنه.
حالا با نوشتن هر اسم و سابمیت کردن فرم میبینید که آدرس درخواست داده شده عوض میشه و چون کدمون اسم رو از کوئری استرینگ میخوند با این کد کاملا سازگاره.
حالا متد فرم رو به پست تغییر بدید. دوباره صفحه از کار میافته. چون دیگه Query String ی وجود نداره. کافیه این خط رو جایگزین کنید:
```
<h1>Salam <%= Request.Form.get("userName") %></h1>
```
اطلاعاتی که با post میفرستیم به جای QueryString توی Form قرار داده میشن.
خب تا اینجا خیلی برنامه مون جالب شده. اما اگر یادتون باشه گفتم هر زبانی یه روش هایی داره و ما داریم تمام مقدسات aspx رو زیر پا میذاریم در حال حاضر. برای این که کم کم بهش نزدیک بشیم اولین قدم رو برمیداریم.
اولا تمام اینپوت ها و فرم مون رو به سرور معرفی میکنیم. چطوری؟ با قرار دادن اتریبیوت runat=server. کدمون این شکلی میشه:
```
<form method="post" runat="server">
    <h1>Salam <%= Request.Form.get("userName") %></h1>
    <input type="text" name="userName" runat="server">
    <input type="submit" runat="server">
</form>
```
چون متد پست پیش فرض هست میتونیم حذفش کنیم. و چون اینپوتمون قراره به سرور معرفی بشه باید id براش تعریف کنیم. از طرفی چون دیگه نمیخوایم با روش سنتی دسترسی به اطلاعات post کار کنیم، با اتریبیوت name کار نداریم. پس همون رو میکنیم id. این کد جدیدمون:
```
<form runat="server">
    <h1>Salam <%= Request.Form.get("userName") %></h1>
    <input type="text" id="userName" runat="server">
    <input type="submit" runat="server">
</form>
```
حالا اگر صفحه رو اجرا کنید باید یه خطای گنده بهتون بده. اگر خطا رو بخونید متوجه میشید میگه userName قبلا تعریف شده و شما دوباره دارید تعریفش میکنید. این خط رو یادتونه:
```
Dim userName As String = "Momo"
```
ما اینجا متغیر userName رو با نوع داده ای String تعریف کردیم. اما حالا بهمون میگه قبلا تعریف شده. که خیلی خوبه. چون یعنی با موفقیت تونستیم اینپوتمون رو به سرور معرفی کنیم و اسمش هم userName هست. برای رفع خطا کافیه یه سینگل کوتیشن (') بذارید اول خطی که توش متغیر تعریف کردیم تا کامنت بشه:
```
'Dim userName As String = "Momo"
```
صفحه رو دوباره درخواست بدید و ببینید اوضاع چطوره. صفحه کار میکنه اما ما هنوز کدمون یکم قدیمیه. حالا که اینپوت به سرور معرفی شده میتونیم خیلی راحت تر باهاش کار کنیم:
```
<h1>Salam <%= userName.value %></h1>
```
انگار یه کنترل ویندوزی توی سی شارپ دارید. نه؟
راستی دقت کردید از وقتی فرم و اینپوت ها رو به سرور معرفی کردیم وقتی صفحه رو درخواست میدید متن اینپوت پاک نمیشه؟ این هم از ویژگی های ASP.NET هست و توی زبان های دیگه مثل حالت قبلی ما، وقتی صفحه رو درخواست میدی اطلاعات فرم ریست میشه. مگر این که به صورت دستی دوباره طرف سرور تحویلشون بگیری و پرشون کنی. اما ASP.NET این کار رو برای شما به صورت خودکار انجام میده.
خب هنوزم صفحه مون باب طبع خدایان ASP.NET نیست. برای این که کاملا aspx طور بشیم، باید به جای استفاده از کنترل های html و معرفی اونا به سرور، از کنترل های خود aspx استفاده کنیم که قبلا گفتم خیلی شبیه کنترل های ویندوزی هستن. البته این شباهت از نظر ظاهری نیست، توی کد نویسی به هم شبیهن. ظاهرشون مثل همیشه با css در اختبار شماست.
کنترل های aspx به صورت تگ های استاندارد xml نوشته میشن. میگم xml چون به عنوان مثال برعکس html حتما باید بسته بشن. یا به صورت self closing یا با یه تگ جدا. برای نوشتن متن مثل ویندوز TextBox داریم و برای هر نوع دکمه ای چه سابمیت چه غیر سابمیت، Button رو داریم. پس:
```
<asp:TextBox ID="userName" runat="server"></asp:TextBox>
<asp:Button ID="submit" runat="server" Text="Salam Kon!" />
```
دقت کنید که تگ asp:Button به صورت self closing آخرش بسته شده وگرنه صفحه کامپایل نمیشه. در حالی که شما اجازه دارید تگ های تکی html مثل br و img و input رو نبندید و خودش میفهمه چه خبره و خطا نیست، برعکس xml و xhtml.
حالا اگر صفحه رو اجرا کنید بازم یه خطا میگیرید. چی میگه؟ میگه من value توی TextBox نمیبینم. این به خاطر همون نکته ست که گفتم همه چی شبیه کنترل های ویندوزی شده. که البته خوبه، چون خیلی یکدست تر با همه کنترل ها کار میکنید و نیاز نیست برای هر کنترل یه روش خاص حفظ کنید:
```
<h1>Salam <%= userName.Text %></h1>
```
هنوز یکم دیگه مونده تا صفحه aspx مون محمدی پسند بشه. ما هنوز داریم از <%= استفاده میکنیم. به جای این میتونیم یه کنترل دیگه بذاریم به اسم Label. درست مثل ویندوز :)
```
<h1>Salam <asp:Label ID="theUser" runat="server" Text="Dadash"></asp:Label></h1>
```
خب الان صفحه اجرا میشه ولی باید یه جوری بهش بفهمونیم که وقتی صفحه رندر میشه Label.Text رو به مقداری که درخواست شده تغییر بده. برای این کار از یه Event استفاده میکنیم که موقع رندر شدن صفحه و درست بعد از معرفی شدن کنترل ها اتفاق می افته.
```
Sub Page_Load()
        theUser.Text = userName.Text
    End Sub
```
به همین سادگی به همین خوشمزگی.
خب این صفحه الان ایراد نداره و aspx طور شده کاملا. اما با یکی از رسومات برنامه نویسی سازگار نیست. و اون جدا SoC (Separation of Concerns) یعنی جدا بودن مشغله ها از همدیگه ست. یعنی یه جا طراحی کنیم و یه جای متفاوت منطق اجرایی و رفتارها رو توضیح بدیم. توی این مورد یعنی html از سی شارپ و VB جدا باشه تا حد ممکن.
برای این کار از مدل Code Behind استفاده میکنیم. برای این کار کافیه تمام کدهای VB رو ببریم توی یه فایل جدا که یه کلاس کامل VB توشه و به صفحه مون بگیم از اون کلاس ارث ببره. اینجوری تمام کدهای اون کلاس توی کلاس ما که فرزندش هست هم حضور داره و چیزی به هم نمیریزه. هر وقت هم برای اولین بار صفحه توی درخواست داده میشه اون کلاس همراه صفحه کامپاسل میشه.
خب برای انجام این کار چه مراحلی رو باید طی کنید؟ اول یه فایل ایجاد کنید برای این که کلاس VB رو توش بنویسیم. اسم این فایل میتونه هر چیزی باشه چون بعدا دستی باید معرفیش کنیم و ASP.NET دنبال اسم خاصی نمیگرده. اما معمولا اسم صفحه رو میذارن و یه .vb یا .cs (یا پسوند مخصوص هر زبانی که استفاده میکنید) که برای ما میشه Default.aspx.vb.
بعد داخلش یه کلاس پارشال (Partial=نیمه) تعریف میکنیم به هر اسمی، که باز مرسومه اسمش مثل اسم فایلمون باشه. اما توی این مورد خاص چون Default یکی از کلمات مخصوص و معنادار توی دات نت هست، یه آندر اسکور (_) اولش میذاریم. و باید حتما Partial باشه چون یه نیمه ش رو بعدا دات نت قراره بنویسه و با هم کامپایلشون کنه. این شد کلاسمون:
```
Partial Class _Default
    Inherits Page

End Class
```
حالا تمام کدهای داخل تگ script رو بیارید اینجا و تگ اسکریپت رو پاک کنید:
```
Partial Class _Default
    Inherits Page

    'Dim userName As String = "Momo"
    Sub Page_Load()
        theUser.Text = userName.Text
    End Sub
    
End Class
```
حالا باید به فایل aspx مون بگیم این فایل رو به عنوان کد همراه خودش معرفی کنه تا کامپایل بشه و باید بهش بگیم از کلاس Default_ هم ارث ببره. این کار رو میتونیم با دایرکتیو پیج (Page Directive) انجام بدیم. این کد رو توی اولین خط صفحه aspx مون قرار بدید:
```
<%@ Page CodeFile="Default.aspx.vb" Inherits="_Default" %>
```
اینم کد نهایی صفحه مون:
```
<%@ Page CodeFile="Default.aspx.vb" Inherits="_Default" %>
<html>
<body>
<form runat="server">
    <h1>Salam <asp:Label ID="theUser" runat="server" Text="Dadash"></asp:Label></h1>
    <asp:TextBox ID="userName" runat="server"></asp:TextBox>
    <asp:Button ID="submit" runat="server" Text="Salam Kon!" />
</form>
</body>
</html>
```
این دیگه یه صفحه مرتب و مودب aspx ه.
میشد توی جلسه اول بگم Visual Studio رو باز کنید و بگید New Website و همه این کارا و یه عالمه کار دیگه رو VS براتون انجام بده. اما الان دیگه وقتی با VS کار میکنید همه چیز رو میفهمید چطوری انجام میده و همه چیز تحت کنترل شما اتفاق می افته.